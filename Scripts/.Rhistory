vars = c("sand", "silt", "phh2o"),
depths = c("0-5cm", "30-60cm"),
stats = c("mean", "Q0.95"),
res = c(1000, 1000)  # resolución en metros
)
plot(stack_1km)
descargar_soilgrids_stack <- function(vars = c("sand", "silt", "soc", "cec"),
depth = "0-5cm",
stat = "mean",
resolucion = c(250, 250)) {
require(terra)
require(gdalUtilities)
# Bounding box en IGH para Colombia
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
capas <- list()
for (v in vars) {
capa <- paste0(v, "_", depth, "_", stat)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
vrt_local <- file.path(tempdir(), paste0(capa, ".vrt"))
# Descargar y recortar el VRT remoto
gdal_translate(
vrt_remote,
vrt_local,
of = "VRT",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
# Leer el raster sin reproyección
r <- terra::rast(vrt_local)
names(r) <- v
capas[[v]] <- r
}
# Stack de todas las capas sin reproyección
return(terra::rast(capas))
}
View(stack_1km)
rm(list=ls())
descargar_soilgrids_stack <- function(vars = c("sand", "silt", "soc", "cec"),
depth = "0-5cm",
stat = "mean",
resolucion = c(250, 250)) {
require(terra)
require(gdalUtilities)
# Bounding box en IGH para Colombia
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
capas <- list()
for (v in vars) {
capa <- paste0(v, "_", depth, "_", stat)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
vrt_local <- file.path(tempdir(), paste0(capa, ".vrt"))
# Descargar y recortar el VRT remoto
gdal_translate(
vrt_remote,
vrt_local,
of = "VRT",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
# Leer el raster sin reproyección
r <- terra::rast(vrt_local)
names(r) <- v
capas[[v]] <- r
}
# Stack de todas las capas sin reproyección
return(terra::rast(capas))
}
descargar_soilgrids_stack()
descargar_soilgrids_stack <- function(vars = c("sand", "silt", "soc", "cec"),
depth = "0-5cm",
stat = "mean",
resolucion = c(250, 250)) {
require(terra)
require(gdalUtilities)
# Bounding box en IGH para Colombia
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
capas <- list()
for (v in vars) {
capa <- paste0(v, "_", depth, "_", stat)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
vrt_local <- file.path(tempdir(), paste0(capa, ".vrt"))
# Descargar y recortar el VRT remoto
gdal_translate(
vrt_remote,
vrt_local,
of = "VRT",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
# Leer el raster sin reproyección
r <- terra::rast(vrt_local)
names(r) <- v
capas[[v]] <- r
}
# Stack de todas las capas sin reproyección
return(terra::rast(capas))
}
descargar_soilgrids_stack <- function(vars = c("sand", "soc", "cec"),
depth = "0-5cm",
stat = "mean",
resolucion = c(250, 250)) {
require(terra)
require(gdalUtilities)
# Bounding box en IGH para Colombia
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
capas <- list()
for (v in vars) {
capa <- paste0(v, "_", depth, "_", stat)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
vrt_local <- file.path(tempdir(), paste0(capa, ".vrt"))
# Descargar y recortar el VRT remoto
gdal_translate(
vrt_remote,
vrt_local,
of = "VRT",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
# Leer el raster sin reproyección
r <- terra::rast(vrt_local)
names(r) <- v
capas[[v]] <- r
}
# Stack de todas las capas sin reproyección
return(terra::rast(capas))
}
stack_suelos <- descargar_soilgrids_stack()
plot(stack_suelos)
descargar_soilgrids_stack <- function(vars = c("sand", "soc", "cec"),
depth = "0-5cm",
stat = "mean",
resolucion = c(1000, 1000)) {
# -------------------------------------------
# 0. Cargar o instalar los paquetes necesarios
# -------------------------------------------
if (!"pacman" %in% installed.packages()[, "Package"]) install.packages("pacman")
pacman::p_load("terra", "gdalUtilities")
# Bounding box en IGH para Colombia
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
capas <- list()
for (v in vars) {
capa <- paste0(v, "_", depth, "_", stat)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
vrt_local <- file.path(tempdir(), paste0(capa, ".vrt"))
# Descargar y recortar el VRT remoto
gdal_translate(
vrt_remote,
vrt_local,
of = "VRT",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
# Leer el raster sin reproyección
r <- terra::rast(vrt_local)
names(r) <- v
capas[[v]] <- r
}
# Stack de todas las capas sin reproyección
return(terra::rast(capas))
}
descargar_soilgrids_stack <- function(vars = c("sand", "bdod", "cec"),
depth = "0-5cm",
stat = "mean",
resolucion = c(1000, 1000)) {
# -------------------------------------------
# 0. Cargar o instalar los paquetes necesarios
# -------------------------------------------
if (!"pacman" %in% installed.packages()[, "Package"]) install.packages("pacman")
pacman::p_load("terra", "gdalUtilities")
# Bounding box en IGH para Colombia
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
capas <- list()
for (v in vars) {
capa <- paste0(v, "_", depth, "_", stat)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
vrt_local <- file.path(tempdir(), paste0(capa, ".vrt"))
# Descargar y recortar el VRT remoto
gdal_translate(
vrt_remote,
vrt_local,
of = "VRT",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
# Leer el raster sin reproyección
r <- terra::rast(vrt_local)
names(r) <- v
capas[[v]] <- r
}
# Stack de todas las capas sin reproyección
return(terra::rast(capas))
}
stack_suelos2 <- descargar_soilgrids_stack()
plot(stack_suelos2)
descargar_soilgrids_stack <- function(vars = c("sand", "cec"),
depths = c("0-5cm", "15-30cm"),
stats = c("mean"),
resolucion = c(250, 250)) {
# -------------------------------------------
# 0. Cargar o instalar los paquetes necesarios
# -------------------------------------------
if (!"pacman" %in% installed.packages()[, "Package"]) install.packages("pacman")
pacman::p_load("terra", "gdalUtilities")
# ----------------------------
# 1. Validación de parámetros
# ----------------------------
depths_validas <- c("0-5cm", "5-15cm", "15-30cm", "30-60cm", "60-100cm", "100-200cm")
stats_validos  <- c("mean", "uncertainty", "Q0.05", "Q0.5", "Q0.95")
if (!all(depths %in% depths_validas)) {
stop("Profundidades inválidas. Usa: ", paste(depths_validas, collapse = ", "))
}
if (!all(stats %in% stats_validos)) {
stop("Valores estadísticos inválidos. Usa: ", paste(stats_validos, collapse = ", "))
}
# --------------------------------------------
# 2. Definición del área de recorte y VRT base
# --------------------------------------------
# Bounding box de Colombia en proyección IGH
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# URL base de SoilGrids (usando acceso vía /vsicurl)
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
# Lista donde se acumularán los raster
capas <- list()
for (v in vars) {
for (d in depths) {
for (s in stats) {
# Nombre de la capa esperada, según convención de SoilGrids
capa <- paste0(v, "_", d, "_", s)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
vrt_local  <- file.path(tempdir(), paste0(capa, ".vrt"))
message("Procesando: ", capa)
# ----------------------------
# 4. Crear archivo VRT recortado
# ----------------------------
try({
gdal_translate(
src_dataset = vrt_remote,
dst_dataset = vrt_local,
of = "VRT",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
}, silent = TRUE)
# ----------------------------
# 5. Leer raster resultante y añadir al stack
# ----------------------------
r <- try(terra::rast(vrt_local), silent = TRUE)
if (!inherits(r, "try-error")) {
names(r) <- capa
capas[[capa]] <- r
} else {
warning("No se pudo leer la capa: ", capa)
}
}
}
}
# -------------------------------------
# 6. Devolver el stack de rasteres (SpatRaster)
# -------------------------------------
if (length(capas) == 0) {
stop("No se pudo cargar ninguna capa válida.")
}
return(terra::rast(capas))
}
descargar_soilgrids_stack <- function(vars = c("sand", "cec"),
depths = c("0-5cm", "15-30cm"),
stats = c("mean"),
resolucion = c(1000, 1000)) {
# -------------------------------------------
# 0. Cargar o instalar los paquetes necesarios
# -------------------------------------------
if (!"pacman" %in% installed.packages()[, "Package"]) install.packages("pacman")
pacman::p_load("terra", "gdalUtilities")
# ----------------------------
# 1. Validación de parámetros
# ----------------------------
depths_validas <- c("0-5cm", "5-15cm", "15-30cm", "30-60cm", "60-100cm", "100-200cm")
stats_validos  <- c("mean", "uncertainty", "Q0.05", "Q0.5", "Q0.95")
if (!all(depths %in% depths_validas)) {
stop("Profundidades inválidas. Usa: ", paste(depths_validas, collapse = ", "))
}
if (!all(stats %in% stats_validos)) {
stop("Valores estadísticos inválidos. Usa: ", paste(stats_validos, collapse = ", "))
}
# --------------------------------------------
# 2. Definición del área de recorte y VRT base
# --------------------------------------------
# Bounding box de Colombia en proyección IGH
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# URL base de SoilGrids (usando acceso vía /vsicurl)
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
# Lista donde se acumularán los raster
capas <- list()
for (v in vars) {
for (d in depths) {
for (s in stats) {
# Nombre de la capa esperada, según convención de SoilGrids
capa <- paste0(v, "_", d, "_", s)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
vrt_local  <- file.path(tempdir(), paste0(capa, ".vrt"))
message("Procesando: ", capa)
# ----------------------------
# 4. Crear archivo VRT recortado
# ----------------------------
try({
gdal_translate(
src_dataset = vrt_remote,
dst_dataset = vrt_local,
of = "VRT",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
}, silent = TRUE)
# ----------------------------
# 5. Leer raster resultante y añadir al stack
# ----------------------------
r <- try(terra::rast(vrt_local), silent = TRUE)
if (!inherits(r, "try-error")) {
names(r) <- capa
capas[[capa]] <- r
} else {
warning("No se pudo leer la capa: ", capa)
}
}
}
}
# -------------------------------------
# 6. Devolver el stack de rasteres (SpatRaster)
# -------------------------------------
if (length(capas) == 0) {
stop("No se pudo cargar ninguna capa válida.")
}
return(terra::rast(capas))
}
stack_suelos3 <- descargar_soilgrids_stack()
plot(stack_suelos3)
names(stack_suelos3)
global(stack_suelos3, fun = "mean", na.rm = TRUE)
summary(stack_suelos3[[1]])
knitr::opts_chunk$set(echo = TRUE)
summary(stack_suelos)
terra::writeRaster(stack_suelos, "soilgrids_stack.tif", overwrite = TRUE)
terra::writeRaster(stack_suelos3, "soilgrids_stack.tif", overwrite = TRUE)
stack_local <- terra::rast("soilgrids_stack.tif")
plot(stack_local)
rm(list=ls())
descargar_soilgrids_stack <- function(vars = c("sand", "bdod"),
depths = c("0-5cm", "15-30cm"),
stats = c("mean"),
resolucion = c(1000, 1000)) {
# -------------------------------------------
# 0. Carga o instala los paquetes necesarios
# -------------------------------------------
if (!"pacman" %in% installed.packages()[, "Package"]) install.packages("pacman")
pacman::p_load("terra", "gdalUtilities")
# ----------------------------
# 1. Validación de parámetros
# ----------------------------
# Lista de variables, produndidades y estadísticas validas en SoilGrids
vars_validas <- c("bdod", "cec", "cfvo", "clay", "silt", "sand",
"nitrogen", "ocd", "ocs", "soc", "phh2o")
depths_validas <- c("0-5cm", "5-15cm", "15-30cm", "30-60cm", "60-100cm", "100-200cm")
stats_validos  <- c("mean", "uncertainty", "Q0.05", "Q0.5", "Q0.95")
# ⚠️ Advertencia si las variables no están en la lista de referencia
if (!all(vars %in% vars_validas)) {
warning("Una o más variables no coinciden con la lista de referencia común de SoilGrids.",
"\nVerifica manualmente su disponibilidad en:",
"\nhttps://files.isric.org/soilgrids/latest/data/")
}
if (!all(depths %in% depths_validas)) {
stop("Profundidades inválidas. Usa: ", paste(depths_validas, collapse = ", "))
}
if (!all(stats %in% stats_validos)) {
stop("Valores estadísticos inválidos. Usa: ", paste(stats_validos, collapse = ", "))
}
# --------------------------------------------
# 2. Define área de recorte y VRT base
# --------------------------------------------
# Bounding box de Colombia en proyección IGH
bb <- c(-8800000.000, 1400000.000, -7400000.000, -500000.000)
igh <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# URL base de SoilGrids (usando acceso vía /vsicurl)
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
# Lista donde se acumularán los raster
capas <- list()
for (v in vars) {
for (d in depths) {
for (s in stats) {
# Construye nombre de capa, ruta remota y ruta temporal local
capa <- paste0(v, "_", d, "_", s)
vrt_remote <- paste0(sg_url, v, "/", capa, ".vrt")
vrt_local  <- file.path(tempdir(), paste0(capa, ".vrt"))
message("Procesando: ", capa)
# ----------------------------
# 4. Crea archivo VRT recortado
# ----------------------------
try({
gdal_translate(
src_dataset = vrt_remote,
dst_dataset = vrt_local,
of = "VRT",
tr = resolucion,
projwin = bb,
projwin_srs = igh
)
}, silent = TRUE)
# ----------------------------
# 5. Lee raster resultante y lo añade al stack
# ----------------------------
r <- try(terra::rast(vrt_local), silent = TRUE)
if (!inherits(r, "try-error")) {
names(r) <- capa
capas[[capa]] <- r
} else {
warning("No se pudo leer la capa: ", capa)
}
}
}
}
# -------------------------------------
# 6. Devuelve el stack de rasteres (SpatRaster)
# -------------------------------------
if (length(capas) == 0) {
stop("No se pudo cargar ninguna capa válida.")
}
return(terra::rast(capas))
}
# Descargar stack de arena, limo y pH para Colombia, resolución 1 km
stack_1km <- descargar_soilgrids_stack(
vars = c("bdod", "phh2o"),
depths = c("0-5cm", "30-60cm"),
stats = c("mean", "Q0.95"),
res = c(1000, 1000)  # resolución default está en metros
)
#Validación
names(stack_1km)
summary(stack_1km)
terra::writeRaster(stack_1km, "soilgrids_stack.tif", overwrite = TRUE)
terra::writeRaster(stack_1km, "soilgrids_stack.tif", overwrite = TRUE)
stack_local <- terra::rast("soilgrids_stack.tif")
plot(stack_local)
knitr::opts_chunk$set(echo = TRUE)
# Para cargar librerias se verifica pacman
if ("pacman" %in% installed.packages() == FALSE) install.packages("pacman")
# Se cargan las librerias
pacman::p_load(char = c(
"here", #manejo de rutas
"sf", #manipulación de dats espaciales
"dplyr", #procesamiento de data frames
"ggplot2",  #graficación
"patchwork", #mosaicos gráficos
"wesanderson", #paleta de colores
"qs" #escribir y leer rápidamente objetos R
)
)
#Paleta de colores
pal <- wes_palette("Zissou1", 100, type = "continuous")
# Ajusta tamaño de letra para todo el script
theme(base_size = 14)
# Source the function
source("00_funcion_carga_soilgrids.R")
# Call the function with custom arguments
stack_custom <- descargar_soilgrids_stack(
vars = c("phh2o", "sand"),
depths = c("30-60cm", "60-100cm"),
stats = c("Q0.95", "mean"),
resolucion = c(1000, 1000)
)
#Validación
names(stack_1km)
#Validación
names(stack_custom)
summary(stack_custom)
terra::writeRaster(stack_1km, here::here("Data","soilgrids_stack.tif"), overwrite = TRUE)
terra::writeRaster(stack_custom, here::here("Data","soilgrids_stack.tif"), overwrite = TRUE)
stack_tif <- terra::rast(here::here("Data","soilgrids_stack.tif"))
plot(stack_1km_tif)
plot(stack_tif)
stack_proj <- terra::project(stack_tif, "EPSG:9377")
normalize_band <- function(x) (x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
stack_proj_z <- app(stack_tif, normalize_band)
plot(stack_proj_z)
stack_proj <- terra::project(stack_tif, "EPSG:9377")
crs(stack_tif) <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
stack_proj <- terra::project(stack_tif, "EPSG:9377")
install.packages("terra", type = "source")
# ==== 1. Instalación y carga de librerías necesarias ====
if (!requireNamespace("rgee", quietly = TRUE)) install.packages("rgee")
library(rgee)
ee_Initialize(drive = TRUE) # Asume autenticación correcta y acceso a Google Driv
ee_install_upgrade()
