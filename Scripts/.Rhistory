)
message(glue::glue("‚úÖ Archivo combinado subido: {archivo_subido$name} (ID: {archivo_subido$id})"))
# Limpieza autom√°tica
unlink(carpeta_temporal, recursive = TRUE)
message("üßπ Archivos temporales eliminados.")
}
combinar_y_subir_csv("DEM")
combinar_y_subir_csv("SLOPE")
# Ruta al CSV combinado
dem_cv <- read_csv("tmp_csv/OUT_DEM_combinado.csv", show_col_types = FALSE)
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
dem_cv_sf <- st_as_sf(
data.frame(dem_cv, geometry = geojson_sf(dem_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(cv = stdDev / mean) #calcula coeficiente de variaci√≥n
# Ruta al CSV combinado
dem_cv <- read_csv(here::here("Data", "OUT_DEM_combinado" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
dem_cv_sf <- st_as_sf(
data.frame(dem_cv, geometry = geojson_sf(dem_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(cv = stdDev / mean) #calcula coeficiente de variaci√≥n
# Ruta al CSV combinado
dem_cv <- read_csv(here::here("Data", "OUT_DEM_combinado.csv" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
dem_cv_sf <- st_as_sf(
data.frame(dem_cv, geometry = geojson_sf(dem_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(cv = stdDev / mean) #calcula coeficiente de variaci√≥n
pacman::p_load(here, remotes, sf, geojsonio, geojsonsf, dplyr, purrr, readr, ggplot2,
patchwork, wesanderson, qs)
# Ruta al CSV combinado
dem_cv <- read_csv(here::here("Data", "OUT_DEM_combinado.csv" ))
# Ruta al CSV combinado
dem_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_DEM_combinado.csv" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
dem_cv_sf <- st_as_sf(
data.frame(dem_cv, geometry = geojson_sf(dem_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(cv = stdDev / mean) #calcula coeficiente de variaci√≥n
View(dem_cv_sf)
47.91928/1984.036
# Ruta al CSV combinado
slope_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_SLOPE_combinado.csv" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
slope_cv_sf <- st_as_sf(
data.frame(slope_cv, geometry = geojson_sf(slope_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(cv = stdDev / mean) #calcula coeficiente de variaci√≥n
# Corre script externo para cargar
source(here::here("Scripts", "00_funcion_carga_ucs_procesadas_qs.R"), encoding = "UTF-8")
# Asignaci√≥n de id √∫nico para cada pol√≠gono
ucs_rao_sf <- ucs_rao_sf |>
sf::st_make_valid() |> #valida geometrias problem√°ticas
dplyr::select(id_creado, UCSuelo, AREA_HA)
ucs_rao_sf <- ucs_rao_sf[!st_is_empty(ucs_rao_sf), ]
#Se verifica visulalmente
ggplot(data = ucs_rao_sf) +
geom_sf(aes(fill = UCSuelo), color = NA) +
theme_void() +
theme(legend.position = "none")
# Ruta al CSV combinado
dem_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_DEM_combinado.csv" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
dem_cv_sf <- st_as_sf(
data.frame(dem_cv, geometry = geojson_sf(dem_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(cv = stdDev / mean) #calcula coeficiente de variaci√≥n
# Ruta al CSV combinado
slope_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_SLOPE_combinado.csv" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
slope_cv_sf <- st_as_sf(
data.frame(slope_cv, geometry = geojson_sf(slope_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(cv = stdDev / mean) #calcula coeficiente de variaci√≥n
str(ucs_rao_sf)
View(ucs_rao_sf)
ucs_rao_sf <- ucs_rao_sf |>
sf::st_make_valid()
View(ucs_rao_sf)
# Corre script externo para cargar
source(here::here("Scripts", "00_funcion_carga_ucs_procesadas_qs.R"), encoding = "UTF-8")
View(ucs_rao_sf)
# Asignaci√≥n de id √∫nico para cada pol√≠gono
ucs_rao_sf <- ucs_rao_sf |>
sf::st_make_valid() |> #valida geometrias problem√°ticas
dplyr::select(id_creado, UCSuelo, AREA_HA, Q)
# Inicializa vector de estado
status_vector <- rep(NA_character_, nrow(dem_cv_sf))
# Recorre el log y asigna el estado a cada fila seg√∫n rango
for (i in seq_len(nrow(registro_dem))) {
fila_inicio <- registro_dem$start_idx[i]
fila_fin    <- registro_dem$end_idx[i]
status_val  <- registro_dem$status[i]
status_vector[fila_inicio:fila_fin] <- status_val
}
# A√±adir al objeto sf
dem_cv_sf$status <- status_vector
# Ruta al CSV combinado
dem_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_DEM_combinado.csv" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
dem_cv_sf <- st_as_sf(
data.frame(dem_cv, geometry = geojson_sf(dem_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(cv = stdDev / mean) #calcula coeficiente de variaci√≥n
# Ruta al CSV combinado
slope_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_SLOPE_combinado.csv" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
slope_cv_sf <- st_as_sf(
data.frame(slope_cv, geometry = geojson_sf(slope_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(cv = stdDev / mean) #calcula coeficiente de variaci√≥n
str(ucs_rao_sf)
str(dem_cv_sf)
str(slope_cv_sf)
View(slope_cv_sf)
#Para exportar como .R plano
# knitr::purl('05_analisis_glm_hotspots.qmd')
if (!"pacman" %in% installed.packages()) install.packages("pacman")
pacman::p_load(
here,        # rutas del proyecto
remotes,     # instalar desde GitHub
sf,          # vectores espaciales
geojsonio,   # GeoJSON ‚Üî objetos R
geojsonsf,   # GeoJSON ‚Üî sf r√°pido
dplyr,       # manipulaci√≥n tabular
tidyr,
purrr,       # funciones map*
broom,
readr,       # leer CSV r√°pido
performance,
ggplot2,     # gr√°ficos
ggpubr,
patchwork,   # unir gr√°ficos
wesanderson, # paletas de color
qs           # guardar objetos r√°pido
)
# Selecci√≥n entorno ya existente antes de cualquier llamado que use Python
reticulate::use_condaenv("rgee_py", required = TRUE)
## Librer√≠as que usan Python
library(reticulate)
library(rgee)
library(googledrive)
# ==== Autenticaci√≥n y backend Python ====
ee_clean_user_credentials()      # Limpia credenciales de GEE
ee_clean_pyenv()           # Limpia variables de entorno de reticulate
reticulate::py_run_string("import ee; ee.Authenticate()")
reticulate::py_run_string("import ee; ee.Initialize(project='even-electron-461718-g2')")
# === Autenticaci√≥n Google Drive ===
googledrive::drive_auth()
# Corre script externo para cargar
source(here::here("Scripts", "00_funcion_carga_ucs_procesadas_qs.R"), encoding = "UTF-8")
# Asignaci√≥n de id √∫nico para cada pol√≠gono
ucs_rao_sf <- ucs_rao_sf |>
sf::st_make_valid() |> #valida geometrias problem√°ticas
dplyr::select(id_creado, UCSuelo, AREA_HA, Q)
ucs_rao_sf <- ucs_rao_sf[!st_is_empty(ucs_rao_sf), ]
#Se verifica visulalmente
ggplot(data = ucs_rao_sf) +
geom_sf(aes(fill = UCSuelo), color = NA) +
theme_void() +
theme(legend.position = "none")
# Transforma a crs 4326 antes de pasarlo a GEE
ucs_sf_4326 <- st_transform(ucs_rao_sf, 4326)
# #Extrae bounding boxdel √°rea del subconjunto
bb_sf_4326 <- st_bbox(ucs_sf_4326)
# Convertir a rect√°ngulo de Earth Engine
bbox_ee <- ee$Geometry$Rectangle(
coords = list(
bb_sf_4326["xmin"],
bb_sf_4326["ymin"],
bb_sf_4326["xmax"],
bb_sf_4326["ymax"]
),
geodesic = FALSE
)
# Temperatura superficial (LST)
lst_media <- ee$ImageCollection("LANDSAT/LC08/C02/T1_L2")$
filterBounds(bbox_ee)$
filterDate("2013-01-01", "2023-01-01")$
map(function(img) {
img$select("ST_B10")$multiply(0.00341802)$add(149)
})$
median()$
rename("lst")
# Visualizaci√≥n
Map$setCenter(-74, 4, 5)
Map$addLayer(
lst_media,
visParams = list(min = 270, max = 320, palette = c("blue","white","red")),
name  = "LST mediana"
)
vhvv_media <- ee$ImageCollection("COPERNICUS/S1_GRD")$
filterBounds(bbox_ee)$
filterDate("2015-01-01", "2024-01-01")$
filter(ee$Filter$listContains("transmitterReceiverPolarisation", "VV"))$
filter(ee$Filter$listContains("transmitterReceiverPolarisation", "VH"))$
map(function(img) {
img$select("VH")$
divide(img$select("VV"))$
rename("vhvv")
})$
median()$
rename("vhvv")
# Visualizaci√≥n en el visor de rgee
Map$setCenter(lon = -74, lat = 4, zoom = 5)
Map$addLayer(
vhvv_media,
visParams = list(min = 0, max = 2, palette = c("brown", "white", "blue")),
name = "VH/VV mediana"
)
registro_lst <- procesamiento_lotes_imagen(ucs_sf_4326, image = lst_media, start_idx = 1, max_index = 43384, batch_s = 300, reduce_batch_by = 3, variable_name = "LST_media", scale = 100)
registro_vvvh <- procesamiento_lotes_imagen(ucs_sf_4326, image = vhvv_media, start_idx = 1, max_index = 43384, batch_s = 400, reduce_batch_by = 4, variable_name = "VHVV_media", scale = 50)
source(here::here("Scripts", "00_funcion_procesamiento_lotes_imagen.R"), encoding = "UTF-8")
registro_vvvh <- procesamiento_lotes_imagen(ucs_sf_4326, image = vhvv_media, start_idx = 1, max_index = 43384, batch_s = 300, reduce_batch_by = 3, variable_name = "VHVV_media", scale = 50)
#Para exportar como .R plano
# knitr::purl('05_analisis_glm_hotspots.qmd')
if (!"pacman" %in% installed.packages()) install.packages("pacman")
pacman::p_load(
here,        # rutas del proyecto
remotes,     # instalar desde GitHub
sf,          # vectores espaciales
geojsonio,   # GeoJSON ‚Üî objetos R
geojsonsf,   # GeoJSON ‚Üî sf r√°pido
dplyr,       # manipulaci√≥n tabular
tidyr,
purrr,       # funciones map*
broom,
readr,       # leer CSV r√°pido
ggdist,
scales,
ggplot2,     # gr√°ficos
ggpubr,
patchwork,   # unir gr√°ficos
wesanderson, # paletas de color
qs           # guardar objetos r√°pido
)
#Paleta de colores
pal <- wes_palette("Zissou1", 100, type = "continuous")
# Ajusta tama√±o de letra para todo e lscript
theme(base_size = 14)
# Selecci√≥n entorno ya existente antes de cualquier llamado que use Python
reticulate::use_condaenv("rgee_py", required = TRUE)
install.packages("reticulate")
#Para exportar como .R plano
# knitr::purl('05_analisis_glm_hotspots.qmd')
if (!"pacman" %in% installed.packages()) install.packages("pacman")
pacman::p_load(
here,        # rutas del proyecto
remotes,     # instalar desde GitHub
sf,          # vectores espaciales
dplyr,       # manipulaci√≥n tabular
tidyr,
readr,       # leer CSV r√°pido
performance,
ggdist,
scales,      #transformaciones y escalas gr√°ficas
ggplot2,     # gr√°ficos
paletteer,   #paletas de colores
googledrive, #importar y exportar a Google Drive
patchwork,   # unir gr√°ficos
qs           # guardar objetos r√°pido
)
# Ajusta tama√±o de letra para todo e lscript
theme(base_size = 14)
# === Autenticaci√≥n Google Drive ===
#googledrive::drive_auth()
# Corre script externo para cargar
source(here::here("Scripts", "00_funcion_carga_ucs_procesadas_qs.R"), encoding = "UTF-8")
# Asignaci√≥n de id √∫nico para cada pol√≠gono
ucs_rao_sf <- ucs_rao_sf |>
sf::st_make_valid() |> #valida geometrias problem√°ticas
dplyr::select(id_creado, UCSuelo, AREA_HA, Q)
ucs_rao_sf <- ucs_rao_sf[!st_is_empty(ucs_rao_sf), ]
# Transforma a crs 4326 antes de pasarlo a GEE
ucs_sf_4326 <- st_transform(ucs_rao_sf, 4326)
# Ruta al CSV combinado
dem_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_DEM_combinado.csv" ))
combinar_y_subir_csv <- function(propiedad,
carpeta_drive_id_origen = "17yxwhlpgL4EG8inI5u8Nwi08wOrnhJiM",  # GEE_exports
carpeta_drive_id_destino = "1qJ5S25TZaFWzueNhx1M4Gr3P8JYWKGeU",  # Proyecto
carpeta_temporal = "tmp_csv") {
# Crea carpeta temporal local si no existe
if (!dir.exists(carpeta_temporal)) {
dir.create(carpeta_temporal)
}
# Listar archivos en Google Drive (solo .csv con prefijo exacto)
archivos_drive <- googledrive::drive_ls(
path = as_id(carpeta_drive_id_origen),
pattern = glue::glue("^{propiedad}_.*\\.csv$")
) |>
dplyr::filter(stringr::str_ends(name, ".csv"))
if (nrow(archivos_drive) == 0) {
stop(glue::glue("No se encontraron archivos CSV para la propiedad '{propiedad}' en GEE_exports."))
}
message(glue::glue("üì• Descargando {nrow(archivos_drive)} archivos CSV para '{propiedad}'..."))
# Descargar archivos al directorio temporal
purrr::walk2(
archivos_drive$name,
archivos_drive$id,
~ googledrive::drive_download(
file = as_id(.y),
path = file.path(carpeta_temporal, .x),
overwrite = TRUE
)
)
# Leer y combinar
archivos_locales <- list.files(path = carpeta_temporal,
pattern = paste0("^", propiedad, "_.*\\.csv$"),
full.names = TRUE)
combinado <- purrr::map_dfr(archivos_locales, readr::read_csv, show_col_types = FALSE)
# Escribir archivo combinado
nombre_salida <- paste0("OUT_", propiedad, "_combinado.csv")
ruta_salida <- file.path(carpeta_temporal, nombre_salida)
readr::write_csv(combinado, ruta_salida)
# Subir a carpeta final de proyecto en Drive
archivo_subido <- googledrive::drive_upload(
media = ruta_salida,
path = as_id(carpeta_drive_id_destino),
name = nombre_salida,
overwrite = TRUE
)
message(glue::glue("‚úÖ Archivo combinado subido: {archivo_subido$name} (ID: {archivo_subido$id})"))
# Limpieza autom√°tica
unlink(carpeta_temporal, recursive = TRUE)
message("üßπ Archivos temporales eliminados.")
}
combinar_y_subir_csv("DEM")
# Ruta al CSV combinado
dem_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_DEM_combinado.csv" ))
# Ruta al CSV combinado
dem_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_DEM_combinado.csv" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
dem_cv_sf <- st_as_sf(
data.frame(dem_cv, geometry = geojson_sf(dem_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(
dem_cv = stdDev / mean, #calcula coeficiente de variaci√≥n
log_dem_cv = log(dem_cv + 1), #calcula log de coeficiente de variaci√≥n
dem_cv_dens = dem_cv/AREA_HA, #calcula la densidad del coeficiente de variaci√≥n
log_dem_cv_dens = log(dem_cv_dens + 1)
) |>
rename(dem_mean = mean, dem_stdDev = stdDev)
# Ruta al CSV combinado
slope_cv <- read_csv(here::here("Data", "OUT_covars_csv","OUT_SLOPE_combinado.csv" ))
# Convierte geometr√≠a desde .geo (GeoJSON como texto) a objeto sf
slope_cv_sf <- st_as_sf(
data.frame(slope_cv, geometry = geojson_sf(slope_cv$.geo)), #convierte a sf
crs = 4326) |>
select(-.geo) |> #elimina columna de geometria obsoleta
mutate(mean = mean / (180 / pi), #correccion temporal, mientras se descarga lote
stdDev = stdDev / (180 / pi)) |>
mutate(
slope_cv = stdDev / mean, #calcula coeficiente de variaci√≥n
log_slope_cv = log(slope_cv + 1), #calcula log de coeficiente de variaci√≥n
slope_cv_dens = slope_cv/AREA_HA, #calcula la densidad del coeficiente de variaci√≥n
log_slope_cv_dens = log(slope_cv_dens + 1)
) |>
rename(slope_mean = mean, slope_stdDev = stdDev)
# Extraer solo columnas √∫tiles de dem y slope
dem_df <- dem_cv_sf |>
st_drop_geometry() |>
select(-system.index)
slope_df <- slope_cv_sf |>
st_drop_geometry() |>
select(-system.index)
# Unir a la tabla base
modelo_df <- ucs_rao_sf |>
mutate(
#Q = if_else(Q == 0, 1e-3, Q),               # evitar log(0)
Qdens = Q / AREA_HA,                        # diversidad por unidad de √°rea
log_Qdens = log(Qdens + 1),                     # log-transformaci√≥n
log_Qdens01 = (log_Qdens - min(log_Qdens)) /
(max(log_Qdens) - min(log_Qdens)) # escalado entre 0‚Äì1
) |>
left_join(
dem_df,
by = c("id_creado", "AREA_HA", "UCSuelo")
) |>
left_join(
slope_df,
by = c("id_creado", "AREA_HA", "UCSuelo")
)
# Subconjunto sin NA: usado para modelado
modelo_df_completo <- modelo_df |>
drop_na(log_Qdens, dem_cv, slope_cv, dem_mean, slope_mean, log_dem_cv, log_slope_cv, dem_cv_dens, slope_cv_dens)
# Subconjunto con al menos un NA
modelo_df_NA <- modelo_df |>
filter(if_any(c(
log_Qdens, dem_cv, slope_cv, dem_mean, slope_mean, log_dem_cv, log_slope_cv, dem_cv_dens, slope_cv_dens), is.na))
umbral95 <- quantile(modelo_df_completo$log_Qdens, 0.95, na.rm = TRUE)
# 1. Agregar variable binaria a modelo_df_completo
modelo_df_completo <- modelo_df_completo |>
mutate(
log_Qdens_hot95 = as.integer(log_Qdens >= umbral95)
)
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ dem_mean + log_slope_cv_dens,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estad√≠stico
summary(glm_hot)
performance::r2_tjur(glm_hot)
p_resid_dem_mean_logit <- ggplot(modelo_df_completo, aes(x = dem_mean, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_smooth(method = "loess", se = FALSE, color = "#FFD700") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs dem_mean", y = "Residuos", x = "Altitud media") +
theme_minimal()
p_resid_dem_mean_logit <- ggplot(modelo_df_completo, aes(x = log_slope_cv_dens, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_smooth(method = "loess", se = FALSE, color = "#FFD700") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs log(slope CV densificado)", y = "Residuos", x = "log(slope CV densificado)") +
theme_minimal()
p_resid_dem_mean_logit + p_resid_dem_mean_logit
p_resid_dem_mean <- ggplot(modelo_df_completo, aes(x = dem_mean, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_smooth(method = "loess", se = FALSE, color = "#FFD700") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs dem_mean", y = "Residuos", x = "Altitud media") +
theme_minimal()
p_resid_log_slope_cv_dens_logit <- ggplot(modelo_df_completo, aes(x = log_slope_cv_dens, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_smooth(method = "loess", se = FALSE, color = "#FFD700") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs log(slope CV densificado)", y = "Residuos", x = "log(slope CV densificado)") +
theme_minimal()
p_resid_dem_mean + p_resid_log_slope_cv_dens_logit
View(modelo_df_completo)
p_resid_dem_mean <- ggplot(modelo_df_completo, aes(x = dem_mean, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs dem_mean", y = "Residuos", x = "Altitud media") +
theme_minimal()
p_resid_log_slope_cv_dens_logit <- ggplot(modelo_df_completo, aes(x = log_slope_cv_dens, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs log(slope CV densificado)", y = "Residuos", x = "log(slope CV densificado)") +
theme_minimal()
p_resid_dem_mean + p_resid_log_slope_cv_dens_logit
# Subconjunto sin NA: usado para modelado
modelo_df_completo <- modelo_df |>
drop_na(log_Qdens, dem_cv, slope_cv, dem_mean, slope_mean, log_dem_cv, log_slope_cv, dem_cv_dens, slope_cv_dens)
umbral95 <- quantile(modelo_df_completo$log_Qdens, 0.95, na.rm = TRUE)
modelo_df_completo <- modelo_df_completo |>
# Agregar variable binaria a modelo_df_completo
mutate(log_Qdens_hot95 = as.integer(log_Qdens >= umbral95)) |>
mutate(across(
c(dem_cv, slope_cv, dem_mean, slope_mean, log_dem_cv, log_slope_cv, dem_cv_dens, slope_cv_dens),
~ scale(.)[,1],
.names =  "{.col}_z"
))
View(modelo_df_completo)
# Subconjunto sin NA: usado para modelado
modelo_df_completo <- modelo_df |>
drop_na(log_Qdens, dem_cv, slope_cv, dem_mean, slope_mean, log_dem_cv, log_slope_cv, dem_cv_dens, slope_cv_dens)
# Subconjunto con al menos un NA
modelo_df_NA <- modelo_df |>
filter(if_any(c(
log_Qdens, dem_cv, slope_cv, dem_mean, slope_mean, log_dem_cv, log_slope_cv, dem_cv_dens, slope_cv_dens), is.na))
umbral95 <- quantile(modelo_df_completo$log_Qdens, 0.95, na.rm = TRUE)
modelo_df_completo <- modelo_df_completo |>
# Agregar variable binaria a modelo_df_completo
mutate(log_Qdens_hot95 = as.integer(log_Qdens >= umbral95)) |>
mutate(across(
c(dem_cv, slope_cv, dem_mean, slope_mean, log_dem_cv, log_slope_cv, dem_cv_dens, slope_cv_dens, log_dem_cv_dens, log_slope_cv_dens),
~ scale(.)[,1],
.names =  "{.col}_z"
))
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ dem_mean_z + log_slope_cv_dens_z,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estad√≠stico
summary(glm_hot)
performance::r2_tjur(glm_hot)
p_resid_dem_mean <- ggplot(modelo_df_completo, aes(x = dem_mean, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs dem_mean", y = "Residuos", x = "Altitud media") +
theme_minimal()
p_resid_log_slope_cv_dens_logit <- ggplot(modelo_df_completo, aes(x = log_slope_cv_dens, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs log(slope CV densificado)", y = "Residuos", x = "log(slope CV densificado)") +
theme_minimal()
p_resid_dem_mean + p_resid_log_slope_cv_dens_logit
