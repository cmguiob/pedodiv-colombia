)
theme_set(theme_minimal(base_size = 13))
form_fix <- log_Qdens ~                                    # respuesta
dem_media_z + pendiente_media_z +                        # intensidad
lst_media_z  + precip_media_z  +                         # intensidad
log_dem_cv_z + log_pendiente_cv_z +                      # variedad
log_lst_cv_temporal_z + log_precip_cv_temporal_z         # variabilidad
form_full <- update(form_fix, ~ . + (1|era_geo))  # intercepto por era
fit_sar <- fitme(
form_full,
data         = st_drop_geometry(modelo_sf),      # spaMM no usa geometría
family       = gaussian(),
fixed        = list(rho = 0),                    # rho se re-estima
ranPars      = list(phi = 0.1),                  # iniciales
covStruct    = list(
SAR_Wer = nb2listw(nb_queen, style = "W")      # misma W que LISA
)
)
## ─────────────────────────────────────────────────────────────────────────────
##  MODELO SAR-error con intercepto aleatorio por era geológica (spaMM::fitme)
##
##  – Respuesta           : log_Qdens  (densidad log-10 de pedodiversidad)
##  – Efectos fijos       : intensidad (DEM, pendiente, LST, precip)  +
##                          variedad (CV espaciales)                  +
##                          variabilidad temporal (CV temp)
##  – Efecto aleatorio    : (1 | era_geo)  →  intercepto por era
##  – Término espacial    : SAR error sobre la misma W (queen, style = “W”)
##
##  NOTA  ▸ spaMM optimiza ρ (rho) y φ (phi) automáticamente.
##         ▸ Los incluimos en  init = list()  **solo como valores de partida**.
##         ▸ Si quisieras fijar alguno (p.e. rho = 0) usarías fixed = list(rho = 0).
## ─────────────────────────────────────────────────────────────────────────────
form_fix  <- log_Qdens ~                                    # respuesta
dem_media_z + pendiente_media_z +                         # intensidad topográfica
lst_media_z  + precip_media_z  +                          # intensidad climática
log_dem_cv_z + log_pendiente_cv_z +                       # variedad espacial
log_lst_cv_temporal_z + log_precip_cv_temporal_z          # variabilidad temporal
form_full <- update(form_fix, ~ . + (1 | era_geo))          # intercepto por era
fit_sar <- fitme(
formula    = form_full,
data       = st_drop_geometry(modelo_sf),  # spaMM no necesita geometría sf
family     = gaussian(),
## Valores iniciales (se re-estiman):
init = list(
rho = 0.05,   # coef. SAR-error                 (−1 < rho < 1)
phi = 0.10    # var(ε)  — dispersión residual
),
## Estructura de covarianza espacial (lista-peso W ya usada en LISA):
covStruct = list(
SAR_Wer = nb2listw(nb_queen, style = "W")   # contigüidad queen, estandarizada
)
)
## ─────────────────────────────────────────────────────────────────────────────
##  MODELO SAR-error con intercepto aleatorio por era geológica (spaMM::fitme)
##
##  – Respuesta           : log_Qdens  (densidad log-10 de pedodiversidad)
##  – Efectos fijos       : intensidad (DEM, pendiente, LST, precip)  +
##                          variedad (CV espaciales)                  +
##                          variabilidad temporal (CV temp)
##  – Efecto aleatorio    : (1 | era_geo)  →  intercepto por era
##  – Término espacial    : SAR error sobre la misma W (queen, style = “W”)
##
##  NOTA  ▸ spaMM optimiza ρ (rho) y φ (phi) automáticamente.
##         ▸ Los incluimos en  init = list()  **solo como valores de partida**.
##         ▸ Si quisieras fijar alguno (p.e. rho = 0) usarías fixed = list(rho = 0).
## ─────────────────────────────────────────────────────────────────────────────
# 1 ▸ fórmula base (efectos fijos) -------------------------------------------
form_fix  <- log_Qdens ~
dem_media_z + pendiente_media_z +                 # intensidad topográfica
lst_media_z + precip_media_z +                    # intensidad climática
log_dem_cv_z + log_pendiente_cv_z +               # variedad espacial
log_lst_cv_temporal_z + log_precip_cv_temporal_z  # variabilidad temporal
# 2 ▸ añadimos intercepto aleatorio por era geológica -------------------------
form_full <- update(form_fix, ~ . + (1 | era_geo))
# 3 ▸ sub-lista de pesos *solo* para las UCS válidas (keep_log) --------------
#     – evita conjuntos vacíos y mantiene coherencia con el vector respuesta
nb_sub  <- spdep::subset.nb(nb_queen, subset = keep_log)
lw_sub  <- nb2listw(nb_sub, style = "W", zero.policy = TRUE)  # ← clave
# 4 ▸ ajuste con spaMM::fitme() ----------------------------------------------
fit_sar <- fitme(
formula  = form_full,
data     = st_drop_geometry(modelo_sf)[keep_log, ],  # miso subconjunto
family   = gaussian(),
init     = list(rho = 0.05, phi = 0.1),  # valores de arranque
covStruct = list(SAR_Wer = lw_sub)        # estructura espacial
)
## ─────────────────────────────────────────────────────────────────────────────
##  MODELO SAR-error con intercepto aleatorio por era geológica (spaMM::fitme)
##
##  – Respuesta           : log_Qdens  (densidad log-10 de pedodiversidad)
##  – Efectos fijos       : intensidad (DEM, pendiente, LST, precip)  +
##                          variedad (CV espaciales)                  +
##                          variabilidad temporal (CV temp)
##  – Efecto aleatorio    : (1 | era_geo)  →  intercepto por era
##  – Término espacial    : SAR error sobre la misma W (queen, style = “W”)
##
##  NOTA  ▸ spaMM optimiza ρ (rho) y φ (phi) automáticamente.
##         ▸ Los incluimos en  init = list()  **solo como valores de partida**.
##         ▸ Si quisieras fijar alguno (p.e. rho = 0) usarías fixed = list(rho = 0).
## ─────────────────────────────────────────────────────────────────────────────
# 1 ▸ fórmula base ------------------------------------------------------------
form_fix <- log_Qdens ~
dem_media_z + pendiente_media_z +           # intensidad topográfica
lst_media_z + precip_media_z +              # intensidad climática
log_dem_cv_z + log_pendiente_cv_z +         # variedad espacial
log_lst_cv_temporal_z + log_precip_cv_temporal_z  # variabilidad temporal
# 2 ▸ intercepto aleatorio por era -------------------------------------------
form_full <- update(form_fix, ~ . + (1 | era_geo))
# 3 ▸ lista de pesos coherente con las UCS válidas ----------------------------
nb_sub <- spdep::subset.nb(nb_queen, subset = keep_log)
lw_sub <- nb2listw(nb_sub, style = "W", zero.policy = TRUE)
# 4 ▸ ajuste ------------------------------------------------------------------
fit_sar <- fitme(
formula  = form_full,
data     = st_drop_geometry(modelo_sf)[keep_log, ],  # mismo subconjunto
family   = gaussian(),
## valores iniciales (se re-estiman):
init = list(rho = 0.05, phi = 0.1),
## estructura de covarianza espacial  ➜  “SAR_W”
covStruct = list(SAR_W = lw_sub)
)
## ─────────────────────────────────────────────────────────────────────────────
##  MODELO SAR-error con intercepto aleatorio por era geológica (spaMM::fitme)
##
##  – Respuesta           : log_Qdens  (densidad log-10 de pedodiversidad)
##  – Efectos fijos       : intensidad (DEM, pendiente, LST, precip)  +
##                          variedad (CV espaciales)                  +
##                          variabilidad temporal (CV temp)
##  – Efecto aleatorio    : (1 | era_geo)  →  intercepto por era
##  – Término espacial    : SAR error sobre la misma W (queen, style = “W”)
##
##  NOTA  ▸ spaMM optimiza ρ (rho) y φ (phi) automáticamente.
##         ▸ Los incluimos en  init = list()  **solo como valores de partida**.
##         ▸ Si quisieras fijar alguno (p.e. rho = 0) usarías fixed = list(rho = 0).
## ─────────────────────────────────────────────────────────────────────────────
##  Paso extra → factor ‘u’ con un nivel por polígono
modelo_sf$u <- factor(seq_len(nrow(modelo_sf)))  # 43 384 niveles
# 1 ▸ fórmula
form_full <- log_Qdens ~
dem_media_z + pendiente_media_z +
lst_media_z + precip_media_z +
log_dem_cv_z + log_pendiente_cv_z +
log_lst_cv_temporal_z + log_precip_cv_temporal_z +
(1 | era_geo) +                          # intercepto por era
(1 | u)                                  # término SAR-error
# 2 ▸ sub-conjunto y lista-pesos coherentes
keep_idx <- which(keep_log)                # índices numéricos
nb_sub   <- spdep::subset.nb(nb_queen , keep_log)
lw_sub   <- nb2listw(nb_sub , style = "W", zero.policy = TRUE)
# 3 ▸ ajuste
fit_sar <- fitme(
form_full,
data   = st_drop_geometry(modelo_sf)[keep_idx, ],
family = gaussian(),
init = list(rho = 0.05, phi = 0.1),
covStruct = list(
u = list(                    # ← nombre del factor espacial
corr = "SAR_W",
W    = lw_sub
)
)
)
## ─────────────────────────────────────────────────────────────────────────────
##  MODELO SAR-error con intercepto aleatorio por era geológica (spaMM::fitme)
##
##  – Respuesta           : log_Qdens  (densidad log-10 de pedodiversidad)
##  – Efectos fijos       : intensidad (DEM, pendiente, LST, precip)  +
##                          variedad (CV espaciales)                  +
##                          variabilidad temporal (CV temp)
##  – Efecto aleatorio    : (1 | era_geo)  →  intercepto por era
##  – Término espacial    : SAR error sobre la misma W (queen, style = “W”)
##
##  NOTA  ▸ spaMM optimiza ρ (rho) y φ (phi) automáticamente.
##         ▸ Los incluimos en  init = list()  **solo como valores de partida**.
##         ▸ Si quisieras fijar alguno (p.e. rho = 0) usarías fixed = list(rho = 0).
## ─────────────────────────────────────────────────────────────────────────────
# 0 ▸  factor espacial ‘u’  (uno por polígono) -------------------------------
modelo_sf$u <- factor(seq_len(nrow(modelo_sf)))      # 43 384 niveles únicos
# 1 ▸  fórmula completa  ------------------------------------------------------
form_full <- log_Qdens ~
dem_media_z + pendiente_media_z +                   # intensidad topo-climática
lst_media_z + precip_media_z +
log_dem_cv_z + log_pendiente_cv_z +                 # variedad espacial
log_lst_cv_temporal_z + log_precip_cv_temporal_z +  # variabilidad temporal
(1 | era_geo) +                                     # intercepto por era
(1 | u)                                             # término SAR-error
# 2 ▸  subconjunto coherente con keep_log  ------------------------------------
keep_idx <- which(keep_log)                 # índices numéricos
nb_sub   <- spdep::subset.nb(nb_queen, keep_log)          # << sin 'isla'
#  spaMM prefiere nb  (lista de vecinos)  →  pasamos nb, no listw
#  (listw también funciona si le añades attr(*,"neigh") = nb)
# 3 ▸  ajuste con fitme()  ----------------------------------------------------
fit_sar <- fitme(
form_full,
data   = st_drop_geometry(modelo_sf)[keep_idx, ],
family = gaussian(),
init   = list(rho = 0.05, phi = 0.1),     # valores de arranque
covStruct = list(
u = list(                               #  ← mismo nombre que en (1 | u)
corr = "SAR_W",
nb   = nb_sub                         #  o  W = nb2listw(nb_sub,"W")
)
)
)
?fitme
## ─────────────────────────────────────────────────────────────────────────────
##  MODELO SAR-error con intercepto aleatorio por era geológica (spaMM::fitme)
##
##  – Respuesta           : log_Qdens  (densidad log-10 de pedodiversidad)
##  – Efectos fijos       : intensidad (DEM, pendiente, LST, precip)  +
##                          variedad (CV espaciales)                  +
##                          variabilidad temporal (CV temp)
##  – Efecto aleatorio    : (1 | era_geo)  →  intercepto por era
##  – Término espacial    : SAR error sobre la misma W (queen, style = “W”)
##
##  NOTA  ▸ spaMM optimiza ρ (rho) y φ (phi) automáticamente.
##         ▸ Los incluimos en  init = list()  **solo como valores de partida**.
##         ▸ Si quisieras fijar alguno (p.e. rho = 0) usarías fixed = list(rho = 0).
## ─────────────────────────────────────────────────────────────────────────────
# 0 ▸  factor espacial (uno por polígono, mismo orden que nb_queen) ----------
modelo_sf$adj <- factor(seq_len(nrow(modelo_sf)))       # 43 384 niveles
# 1 ▸  fórmula completa  -----------------------------------------------------
form_full <- log_Qdens ~
dem_media_z + pendiente_media_z +                      # intensidad topo-clim.
lst_media_z + precip_media_z +
log_dem_cv_z + log_pendiente_cv_z +                    # variedad espacial
log_lst_cv_temporal_z + log_precip_cv_temporal_z +     # variab. temporal
(1 | era_geo)  +                                       # intercepto por era
(1 | adj)                                              # SAR-error
# 2 ▸  subconjunto coherente con keep_log  -------------------------------
keep_idx <- which(keep_log)                   # índices numéricos
nb_sub   <- spdep::subset.nb(nb_queen, keep_log)      # sin “islas”
A_bin    <- spdep::nb2mat(nb_sub, style = "B")        # matriz 0/1
# 3 ▸  ajuste con fitme()  -----------------------------------------------
fit_sar <- fitme(
form_full,
data        = st_drop_geometry(modelo_sf)[keep_idx, ],
family      = gaussian(),
## estructura del efecto aleatorio ‘adj’
rand.family = "SAR_W",     # simultaneus autoregressive error
adjMatrix   = A_bin,       # ¡clave!: adyacencia binaria (no W estándar)
## valores de arranque (opcionales — se re-optimizan)
init        = list(rho = 0.05, phi = 0.1)
)
## ─────────────────────────────────────────────────────────────────────────────
##  MODELO SAR-error con intercepto aleatorio por era geológica (spaMM::fitme)
##
##  – Respuesta           : log_Qdens  (densidad log-10 de pedodiversidad)
##  – Efectos fijos       : intensidad (DEM, pendiente, LST, precip)  +
##                          variedad (CV espaciales)                  +
##                          variabilidad temporal (CV temp)
##  – Efecto aleatorio    : (1 | era_geo)  →  intercepto por era
##  – Término espacial    : SAR error sobre la misma W (queen, style = “W”)
##
##  NOTA  ▸ spaMM optimiza ρ (rho) y φ (phi) automáticamente.
##         ▸ Los incluimos en  init = list()  **solo como valores de partida**.
##         ▸ Si quisieras fijar alguno (p.e. rho = 0) usarías fixed = list(rho = 0).
## ─────────────────────────────────────────────────────────────────────────────
# 0 ▸  factor espacial con 43 384 niveles (uno por polígono) ---------------
modelo_sf$adj <- factor(seq_len(nrow(modelo_sf)))      # mismo orden que nb_queen
# 1 ▸  fórmula completa ------------------------------------------------------
form_full <- log_Qdens ~
dem_media_z + pendiente_media_z +                # intensidad topo-clim.
lst_media_z + precip_media_z +
log_dem_cv_z + log_pendiente_cv_z +              # variedad espacial
log_lst_cv_temporal_z + log_precip_cv_temporal_z +# variabilidad temporal
(1 | era_geo) +                                  # intercepto por era
(1 | adj)                                        # SAR-error
# 2 ▸  subconjunto coherente con keep_log ------------------------------------
keep_idx <- which(keep_log)                        # índices numéricos
nb_sub   <- spdep::subset.nb(nb_queen, keep_log)   # sin “islas”
A_bin    <- spdep::nb2mat(nb_sub, style = "B")     # adyacencia 0-1
# 3 ▸  ajuste con fitme() ----------------------------------------------------
fit_sar <- fitme(
formula      = form_full,
data         = st_drop_geometry(modelo_sf)[keep_idx, ],
family       = gaussian(),
## correlación del efecto aleatorio ‘adj’
rand.family  = list(adj = "SAR_W"),   # ← nombre debe coincidir con (1|adj)
adjMatrix    = A_bin,                 # 0/1  (no W estandarizada)
## valores de arranque  (se volverán a optimizar)
init         = list(rho = 0.05, phi = 0.1)
)
## ─────────────────────────────────────────────────────────────────────────────
##  MODELO SAR-error con intercepto aleatorio por era geológica (spaMM::fitme)
##
##  – Respuesta           : log_Qdens  (densidad log-10 de pedodiversidad)
##  – Efectos fijos       : intensidad (DEM, pendiente, LST, precip)  +
##                          variedad (CV espaciales)                  +
##                          variabilidad temporal (CV temp)
##  – Efecto aleatorio    : (1 | era_geo)  →  intercepto por era
##  – Término espacial    : SAR error sobre la misma W (queen, style = “W”)
##
##  NOTA  ▸ spaMM optimiza ρ (rho) y φ (phi) automáticamente.
##         ▸ Los incluimos en  init = list()  **solo como valores de partida**.
##         ▸ Si quisieras fijar alguno (p.e. rho = 0) usarías fixed = list(rho = 0).
## ─────────────────────────────────────────────────────────────────────────────
library(spdep); library(spatialreg)
# lista de vecinos y pesos -------------------------------
nb_queen   <- poly2nb(modelo_sf)              # misma queen que en LISA
install.packages("INLA")
remotes::install_version("INLA", version = "25.06.13",
repos = c(getOption("repos"), INLA = "https://inla.r-inla-download.org/R/testing"), dep = TRUE)
#Para exportar como .R plano
# knitr::purl('06_analisis_SAR_CAR__jerarquicos.qmd')
if (!"pacman" %in% rownames(installed.packages())) install.packages("pacman")
pacman::p_load(
here,         # manejo de rutas relativas al proyecto
remotes,      # instalar paquetes desde GitHub (si llegamos a necesitarlos)
sf,           # lectura y manipulación de objetos espaciales vectoriales
dplyr,        # verbos de manipulación de data frames (filter, mutate, joins)
tidyr,        # pivoteo y desanidado de datos (pivot_longer, unnest, etc.)
readr,        # lectura/escritura rápida de archivos CSV
geojsonsf,    # GeoJSON ↔ sf rápido (geojson_sf)
rmapshaper,   # Simplificación de geometrías
stringr,      # Manipulación d textos
ggplot2,      # sistema de gráficos
ggdist,       # distribuciones y visuales tipo half-eye / histinterval
patchwork,    # combinación de gráficos ggplot (p1 + p2)
paletteer,    # acceso a múltiples paletas (viridis, wesanderson, etc.)
scales,       # helpers de ejes y transformaciones (log10, percentiles)
grid,         # utilidades de bajo nivel para gráficos (layouts, grobs)
GGally,       # correlogramas y extensiones ggplot
sjPlot,       # visualización de modelos (coeficientes, efectos marginales)
spdep,        # estructuras de vecinos y pruebas de autocorrelación
spatialreg,   # modelos SAR / SEM / SDM / SDEM / SARAR
spaMM,        # Modelos mixtos
performance,  # métricas de ajuste (pseudo-R², VIF, etc.)
classInt,     # cortes de intervalos (quantile, jenks, etc.)
INLA,         # modelos Bayesianos rápidos (CAR/BYM/Leroux)
lme4,         # modelos mixtos jerárquicos (GLMM)
MuMIn,        # R² marginal/condicional para modelos mixtos
googledrive   # autenticación y manejo de archivos en Google Drive
)
theme_set(theme_minimal(base_size = 13))
# Para instalar INLA:
# https://www.r-inla.org/download-install
remotes::install_version("INLA", version = "24.05.10",
repos = c(getOption("repos"), INLA = "https://inla.r-inla-download.org/R/testing"), dep = TRUE)
# R 4.5 ya trae Rtools 4.5.  Si no lo detecta:
#   install.packages('installr'); installr::install.Rtools()
install.packages(c("remotes", "BiocManager"), type = "binary")
BiocManager::install(c("graph", "Rgraphviz"), update = FALSE, ask = FALSE)
options(repos = c(
INLA = "https://inla.r-inla-download.org/R/stable",
getOption("repos")
))
install.packages("INLA", type = "binary", dependencies = TRUE)
#Para exportar como .R plano
# knitr::purl('06_analisis_SAR_CAR__jerarquicos.qmd')
if (!"pacman" %in% rownames(installed.packages())) install.packages("pacman")
pacman::p_load(
here,         # manejo de rutas relativas al proyecto
remotes,      # instalar paquetes desde GitHub (si llegamos a necesitarlos)
sf,           # lectura y manipulación de objetos espaciales vectoriales
dplyr,        # verbos de manipulación de data frames (filter, mutate, joins)
tidyr,        # pivoteo y desanidado de datos (pivot_longer, unnest, etc.)
readr,        # lectura/escritura rápida de archivos CSV
geojsonsf,    # GeoJSON ↔ sf rápido (geojson_sf)
rmapshaper,   # Simplificación de geometrías
stringr,      # Manipulación d textos
ggplot2,      # sistema de gráficos
ggdist,       # distribuciones y visuales tipo half-eye / histinterval
patchwork,    # combinación de gráficos ggplot (p1 + p2)
paletteer,    # acceso a múltiples paletas (viridis, wesanderson, etc.)
scales,       # helpers de ejes y transformaciones (log10, percentiles)
grid,         # utilidades de bajo nivel para gráficos (layouts, grobs)
GGally,       # correlogramas y extensiones ggplot
sjPlot,       # visualización de modelos (coeficientes, efectos marginales)
spdep,        # estructuras de vecinos y pruebas de autocorrelación
spatialreg,   # modelos SAR / SEM / SDM / SDEM / SARAR
spaMM,        # Modelos mixtos
performance,  # métricas de ajuste (pseudo-R², VIF, etc.)
classInt,     # cortes de intervalos (quantile, jenks, etc.)
INLA,         # modelos Bayesianos rápidos (CAR/BYM/Leroux)
lme4,         # modelos mixtos jerárquicos (GLMM)
MuMIn,        # R² marginal/condicional para modelos mixtos
googledrive   # autenticación y manejo de archivos en Google Drive
)
theme_set(theme_minimal(base_size = 13))
# Para instalar INLA:
# https://www.r-inla.org/download-install
# --- índices ---------------------------------------------------
modelo_sf$id_poly <- seq_len(nrow(modelo_sf))            # ID polígono
g <- nb2mat(nb_queen, style = "B")                       # adyacencia 0-1
## ── 1 · Sub-vecindad sin islas ─────────────────────────────────────────────
# keep_log  →  vector lógico ya definido (dato ≠ NA  y  ≥1 vecino con dato)
nb_sub <- spdep::subset.nb(nb_queen, subset = keep_log)            # lista vecinos
if (any(spdep::card(nb_sub) == 0)) stop("aún quedan polígonos sin vecinos")
## ── 2 · Matriz de adyacencia binaria 0/1 (estilo = “B”) ────────────────────
A_bin <- spdep::nb2mat(nb_sub, style = "B", zero.policy = TRUE)    # OK
# filas/columnas = n_valid  (≈ 41 500, no 43 384)
## ── 3 · Fichero graph que INLA lee automáticamente ────────────────────────
# (opción más segura cuando la matriz es grande)
queen_graph <- "queen_sub.graph"
nb2INLA(file = queen_graph, nb = nb_sub)    # crea el .graph en disco
## ── 4 · Índice numérico de polígono dentro del subconjunto ────────────────
modelo_sf$id_poly <- NA_integer_
modelo_sf$id_poly[keep_log] <- seq_len(sum(keep_log))   # 1…n_valid
## ── 5 · Fórmula BYM2 (dependencia + heterogeneidad) ───────────────────────
formula_bym2 <- log_Qdens ~
dem_media_z + pendiente_media_z +
lst_media_z + precip_media_z +
log_dem_cv_z + log_pendiente_cv_z +
log_lst_cv_temporal_z + log_precip_cv_temporal_z +
f(era_geo, model = "iid") +                # intercepto por era
f(id_poly, model = "bym2",
graph = queen_graph,
scale.model = TRUE)
## ── 6 · Ajuste con INLA ────────────────────────────────────────────────────
fit_bym2 <- INLA::inla(
formula_bym2,
data   = as.data.frame(modelo_sf)[keep_log, ],   # mismo subconjunto
family = "gaussian",
control.predictor = list(compute = TRUE),
control.compute   = list(dic = TRUE, waic = TRUE)
)
# tabla compacta (DIC, WAIC, logLik)
fit_bym2$dic$dic
fit_bym2$waic$waic
summary(fit_bym2)$cpu    # tiempos y nº de iteraciones
fix_tab <- fit_bym2$summary.fixed[, c("mean","0.025quant","0.975quant")]
print(round(fix_tab, 3))
# forest‐plot rápido
ggplot(as.data.frame(fix_tab), aes(x = mean, y = rownames(fix_tab)))+
geom_point()+
geom_errorbarh(aes(xmin = `0.025quant`, xmax = `0.975quant`), height = .1)+
labs(x = "β  (posterior mean ±95% CI)", y = NULL)+
theme_minimal()
hyper <- fit_bym2$summary.hyperpar
print(round(hyper, 4))         # incluye phi, prec.iid, prec.spatial
era_tab <- fit_bym2$summary.random$era_geo[, c("ID","mean","0.025quant","0.975quant")]
ran_spat <- fit_bym2$summary.random$id_poly
modelo_sf$u_mean   <- NA_real_
modelo_sf$u_sd     <- NA_real_
modelo_sf$u_mean[keep_log] <- ran_spat$mean
modelo_sf$u_sd  [keep_log] <- ran_spat$sd
library(ggplot2)
ggplot(modelo_sf) +
geom_sf(aes(fill = u_mean), colour = NA) +
scale_fill_viridis_c(option = "magma", direction = -1) +
labs(title = "Campo espacial BYM2 – media posterior", fill = "mean(u)") +
theme_minimal()
# media posterior y sd en la misma fila que los datos usados
pred_df <- fit_bym2$summary.fitted[ , c("mean","sd","0.025quant","0.975quant")]
modelo_sf$mu_post <- NA_real_
modelo_sf$mu_sd   <- NA_real_
modelo_sf$mu_post[keep_log] <- pred_df$mean
modelo_sf$mu_sd  [keep_log] <- pred_df$sd
# Pearson residual
modelo_sf$resid <- modelo_sf$log_Qdens - modelo_sf$mu_post
# mapa de residuos
ggplot(modelo_sf) +
geom_sf(aes(fill = resid), colour = NA) +
scale_fill_gradient2(mid = "white") +
labs(title = "Residuos posteriores (observado – media posterior)") +
theme_minimal()
round(hyper, 4)
tabla_beta <- fit_bym2$summary.fixed |>
tibble::rownames_to_column("Covariable") |>
dplyr::select(
Covariable,
`Media`  = mean,
`SD`     = sd,
`2.5 %`  = `0.025quant`,
`97.5 %` = `0.975quant`
)
tabla_beta
tabla_beta <- fit_bym2$summary.fixed |>
tibble::rownames_to_column("Covariable") |>
dplyr::select(
Covariable,
`Media`  = mean,
`SD`     = sd,
`2.5 %`  = `0.025quant`,
`97.5 %` = `0.975quant`
)
tabla_beta
attr(modelo_sf$dem_media_z, "scaled:scale")
sd(modelo_sf$dem_media, na.rm = TRUE)
sd(modelo_sf$slope_media, na.rm = TRUE)
sd(modelo_sf$pendiente_media, na.rm = TRUE)
sd(modelo_sf$pendiente_media, na.rm = TRUE)
print(round(hyper, 4))
era_tab <- fit_bym2$summary.random$era_geo[, c("ID","mean","0.025quant","0.975quant")]
era_tab
era_tab
## ─────────────────────────────────────────────────────────────
##  Mapa de residuos posteriores  (observado – media posterior)
## ─────────────────────────────────────────────────────────────
# 1 ▸ extrae media y sd de la lista de predicciones de INLA
pred_df <- fit_bym2$summary.fitted[ , c("mean","sd")]
modelo_sf$mu_post <- modelo_sf$mu_sd <- NA_real_
modelo_sf$mu_post[keep_log] <- pred_df$mean   # media posterior
modelo_sf$mu_sd  [keep_log] <- pred_df$sd     # desv. típ. posterior
# 2 ▸ residuo posterior (escala original ‒log10-)
modelo_sf$resid <- modelo_sf$log_Qdens - modelo_sf$mu_post
# 3 ▸ paleta Zissou 1 (continua) adaptada como diverging
pal_cont <- paletteer::paletteer_c("grDevices::Zissou 1", 100)
pal_div  <- c(rev(pal_cont[10:1]), pal_cont[11:90])   # ~amarillo-blanco-púrpura
# 4 ▸ mapa
p_resid <- ggplot(modelo_sf) +
geom_sf(aes(fill = resid), colour = NA) +
scale_fill_gradientn(
colours = pal_div,
limits  = c(-4, 4),          # recorta colas extremas a ±4 u log
oob     = scales::squish,    # valores fuera → extremo de la paleta
name    = "resid"
) +
labs(title = "Residuos posteriores (observado – media posterior)") +
theme_minimal()
p_resid            # se renderiza en el cuaderno
