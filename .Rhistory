by = c("id_creado", "AREA_HA", "UCSuelo")
)
p_slope_mean <- ggplot(modelo_df, aes(slope_mean)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de media de DEM", y = "Frecuencia", x = "Media de DEM")
p_slope_mean
p_log_slope_mean <- ggplot(modelo_df, aes(log_slope_mean)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log media de DEM", y = "Frecuencia", x = "Log media de DEM")
p_log_slope_mean
View(modelo_df)
p_slope_mean <- ggplot(modelo_df, aes(slope_mean)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de media de DEM", y = "Frecuencia", x = "Media de DEM")
p_slope_mean
p_log_slope_cv <- ggplot(modelo_df, aes(log_slope_cv)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log media de DEM", y = "Frecuencia", x = "Log media de DEM")
p_log_slope_cv
p_log_slope_cv_dens <- ggplot(modelo_df, aes(log_slope_cv_dens)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log media de DEM", y = "Frecuencia", x = "Log media de DEM")
p_log_slope_cv_dens
p_mosaico_distr_slope <- p_slope_mean + p_log_slope_cv + p_log_slope_cv_dens + plot_layout(ncol = 3, widths = c(1, 1))
p_slope_mean <- ggplot(modelo_df, aes(slope_mean)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de media de DEM", y = "Frecuencia", x = "Media de DEM")
p_slope_mean
p_log_slope_cv <- ggplot(modelo_df, aes(log_slope_cv)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log CV de SLOPE", y = "Frecuencia", x = "Log media de DEM")
p_log_slope_cv
p_log_slope_cv_dens <- ggplot(modelo_df, aes(log_slope_cv_dens)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log densidad CV de SLOPE", y = "Frecuencia", x = "Log media de DEM")
p_log_slope_cv_dens
p_mosaico_distr_slope <- p_slope_mean + p_log_slope_cv + p_log_slope_cv_dens + plot_layout(ncol = 3, widths = c(1, 1))
p_slope_mean <- ggplot(modelo_df, aes(slope_mean)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de media de SLOPE", y = "Frecuencia", x = "Media de DEM")
p_slope_mean
p_log_slope_cv <- ggplot(modelo_df, aes(log_slope_cv)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log CV de SLOPE", y = "Frecuencia", x = "Log media de DEM")
p_log_slope_cv
p_log_slope_cv_dens <- ggplot(modelo_df, aes(log_slope_cv_dens)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log densidad CV de SLOPE", y = "Frecuencia", x = "Log media de DEM")
p_log_slope_cv_dens
p_mosaico_distr_slope <- p_slope_mean + p_log_slope_cv + p_log_slope_cv_dens + plot_layout(ncol = 3, widths = c(1, 1))
p_slope_mean <- ggplot(modelo_df, aes(slope_mean)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de media de SLOPE", y = "Frecuencia", x = "Media de DEM")
p_slope_mean
p_log_slope_cv <- ggplot(modelo_df, aes(log_slope_cv)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log CV de SLOPE", y = "Frecuencia", x = "Log CV de SLOPE")
p_log_slope_cv
p_log_slope_cv_dens <- ggplot(modelo_df, aes(log_slope_cv_dens)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log densidad CV de SLOPE", y = "Frecuencia", x = "Log densidad de CV de SLOPE")
p_log_slope_cv_dens
p_mosaico_distr_slope <- p_slope_mean + p_log_slope_cv + p_log_slope_cv_dens + plot_layout(ncol = 3, widths = c(1, 1))
p_dem_mean <- ggplot(modelo_df, aes(dem_mean)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de media de DEM", y = "Frecuencia", x = "Media de DEM")
p_dem_mean
p_log_dem_cv <- ggplot(modelo_df, aes(log_dem_cv)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log CV de DEM", y = "Frecuencia", x = "Log media de DEM")
p_log_dem_cv
p_log_dem_cv_dens <- ggplot(modelo_df, aes(log_dem_cv_dens)) +
ggdist::stat_histinterval(fill = "#56B4E9", color = "black", .width = c(0.5, 0.9)) +
geom_density(aes(y = after_stat(scaled)), color = "#FFD700", size = 0.8) +
labs(title = "Distribución de log densidad CV de DEM", y = "Frecuencia", x = "Log media de DEM")
p_log_dem_cv_dens
p_mosaico_distr_DEM <- p_dem_mean + p_log_dem_cv + p_log_dem_cv_dens + plot_layout(ncol = 3, widths = c(1, 1))
p_mapa_dem_mean <- ggplot(modelo_df |> filter(dem_mean >=0)) +
geom_sf(aes(fill = dem_mean), color = NA) +
scale_fill_gradientn(colours = pal, na.value = "white") +
labs(title = "Mapa de media de DEM", fill = "Media") +
theme_minimal()
p_mapa_dem_mean
p_mapa_slope_mean <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_mean), color = NA) +
scale_fill_gradientn(colours = pal, na.value = "white") +
labs(title = "Mapa de media de SLOPE", fill = "Media") +
theme_minimal()
p_mapa_slope_mean
p_mapa_log_dem_cv <- ggplot(modelo_df |> filter(log_dem_cv >=0)) +
geom_sf(aes(fill = dem_cv), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de CV de DEM - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_dem_cv
p_mapa_log_slope_cv <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_cv), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de CV de SLOPE - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_slope_cv
p_mapa_log_dem_cv_dens <- ggplot(modelo_df) +
geom_sf(aes(fill = dem_cv_dens), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de densidad de CV de DEM - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_dem_cv_dens
p_mapa_log_slope_cv_dens <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_cv_dens), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de densidad de CV de SLOPE - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_slope_cv_dens
p_mapas_covs <- p_mapa_dem_mean + p_mapa_slope_mean + p_mapa_log_dem_cv + p_mapa_log_slope_cv + p_mapa_log_dem_cv_dens + p_mapa_log_slope_cv_dens+ plot_layout(ncol = 2, widths = c(1, 1))
#guarda el último gráfico generado
ggsave(here("Figures", "mosaico_mapa_covariables_DEM.png"),
plot = p_mapas_covs,
width = 8,
height = 10,
dpi = 350)
#Paleta de colores
pal <- wes_palette("Zissou1", 100, type = "continuous")
p_mapa_dem_mean <- ggplot(modelo_df |> filter(dem_mean >=0)) +
geom_sf(aes(fill = dem_mean), color = NA) +
scale_fill_gradientn(colours = pal, na.value = "white") +
labs(title = "Mapa de media de DEM", fill = "Media") +
theme_minimal()
p_mapa_dem_mean
p_mapa_slope_mean <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_mean), color = NA) +
scale_fill_gradientn(colours = pal, na.value = "white") +
labs(title = "Mapa de media de SLOPE", fill = "Media") +
theme_minimal()
p_mapa_slope_mean
p_mapa_log_dem_cv <- ggplot(modelo_df |> filter(log_dem_cv >=0)) +
geom_sf(aes(fill = dem_cv), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de CV de DEM - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_dem_cv
p_mapa_log_slope_cv <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_cv), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de CV de SLOPE - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_slope_cv
p_mapa_log_dem_cv_dens <- ggplot(modelo_df) +
geom_sf(aes(fill = dem_cv_dens), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de densidad de CV de DEM - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_dem_cv_dens
p_mapa_log_slope_cv_dens <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_cv_dens), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de densidad de CV de SLOPE - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_slope_cv_dens
p_mapas_covs <- p_mapa_dem_mean + p_mapa_slope_mean + p_mapa_log_dem_cv + p_mapa_log_slope_cv + p_mapa_log_dem_cv_dens + p_mapa_log_slope_cv_dens+ plot_layout(ncol = 2, widths = c(1, 1))
#guarda el último gráfico generado
ggsave(here("Figures", "mosaico_mapa_covariables_DEM.png"),
plot = p_mapas_covs,
width = 8,
height = 10,
dpi = 350)
p_mapa_dem_mean <- ggplot(modelo_df |> filter(dem_mean >=0)) +
geom_sf(aes(fill = dem_mean), color = NA) +
scale_fill_gradientn(colours = pal, na.value = "white") +
labs(title = "Mapa de media de DEM", fill = "Media") +
theme_minimal()
p_mapa_dem_mean <- ggplot(modelo_df |> filter(dem_mean >=0)) +
geom_sf(aes(fill = dem_mean), color = NA) +
scale_fill_gradientn(colours = pal, na.value = "white") +
labs(title = "Mapa de media de DEM", fill = "Media") +
theme_minimal()
p_mapa_slope_mean <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_mean), color = NA) +
scale_fill_gradientn(colours = pal, na.value = "white") +
labs(title = "Mapa de media de SLOPE", fill = "Media") +
theme_minimal()
p_mapa_log_dem_cv <- ggplot(modelo_df |> filter(log_dem_cv >=0)) +
geom_sf(aes(fill = dem_cv), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de CV de DEM - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_slope_cv <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_cv), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de CV de SLOPE - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_dem_cv_dens <- ggplot(modelo_df) +
geom_sf(aes(fill = dem_cv_dens), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de densidad de CV de DEM - escalado log", fill = "Media") +
theme_minimal()
p_mapa_log_slope_cv_dens <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_cv_dens), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de densidad de CV de SLOPE - escalado log", fill = "Media") +
theme_minimal()
p_mapas_covs <- p_mapa_dem_mean + p_mapa_slope_mean + p_mapa_log_dem_cv + p_mapa_log_slope_cv + p_mapa_log_dem_cv_dens + p_mapa_log_slope_cv_dens+ plot_layout(ncol = 2, widths = c(1, 1))
#guarda el último gráfico generado
ggsave(here("Figures", "mosaico_mapa_covariables_DEM.png"),
plot = p_mapas_covs,
width = 8,
height = 10,
dpi = 350)
# Subconjunto sin NA: usado para modelado
modelo_df_completo <- modelo_df |>
drop_na(log_Qdens, dem_cv, slope_cv, dem_mean, slope_mean, log_dem_cv, log_slope_cv, dem_cv_dens, slope_cv_dens)
# Subconjunto con al menos un NA
modelo_df_NA <- modelo_df |>
filter(if_any(c(
log_Qdens, dem_cv, slope_cv, dem_mean, slope_mean, log_dem_cv, log_slope_cv, dem_cv_dens, slope_cv_dens), is.na))
umbral95 <- quantile(modelo_df_completo$log_Qdens, 0.95, na.rm = TRUE)
# 1. Agregar variable binaria a modelo_df_completo
modelo_df_completo <- modelo_df_completo |>
mutate(
log_Qdens_hot95 = as.integer(log_Qdens >= umbral95)
)
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ dem_cv + slope_cv + dem_mean + slope_mean + dem_cv_dens + slope_cv_dens,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estadístico
summary(glm_hot)
performance::r2_tjur(glm_hot)
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ dem_mean + slope_mean + log_dem_cv_dens + log_slope_cv_dens,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estadístico
summary(glm_hot)
performance::r2_tjur(glm_hot)
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ log_dem_cv_dens + log_slope_cv_dens,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estadístico
summary(glm_hot)
performance::r2_tjur(glm_hot)
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ dem_mean + slope_mean + log_dem_cv_dens + log_slope_cv_dens,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estadístico
summary(glm_hot)
performance::r2_tjur(glm_hot)
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ dem_mean + slope_mean + log_dem_cv + log_slope_cv+ log_dem_cv_dens + log_slope_cv_dens,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estadístico
summary(glm_hot)
performance::r2_tjur(glm_hot)
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ dem_mean + slope_mean +  log_dem_cv_dens + log_slope_cv_dens,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estadístico
summary(glm_hot)
performance::r2_tjur(glm_hot)
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ log_dem_cv_dens + log_slope_cv_dens,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estadístico
summary(glm_hot)
performance::r2_tjur(glm_hot)
# 2. Ajustar modelo directamente sobre modelo_df_completo
glm_hot <- glm(
log_Qdens_hot95 ~ dem_mean + log_slope_cv_dens,
data = modelo_df_completo,
family = binomial())
# 3. Calcular predicciones y residuos en la misma tabla
modelo_df_completo <- modelo_df_completo |>
mutate(
prob_hot95 = predict(glm_hot, newdata = modelo_df_completo, type = "response"),
resid_hot95 = residuals(glm_hot, type = "response")
)
#Resumen estadístico
summary(glm_hot)
performance::r2_tjur(glm_hot)
p_mapa_dem_mean <- ggplot(modelo_df |> filter(dem_mean >=0)) +
geom_sf(aes(fill = dem_mean), color = NA) +
scale_fill_gradientn(colours = pal, na.value = "white") +
labs(title = "Mapa de media de DEM", fill = "Media") +
theme_minimal()
p_mapa_slope_mean <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_mean), color = NA) +
scale_fill_gradientn(colours = pal, na.value = "white") +
labs(title = "Mapa de media de SLOPE", fill = "Media") +
theme_minimal()
p_mapa_log_dem_cv <- ggplot(modelo_df |> filter(log_dem_cv >=0)) +
geom_sf(aes(fill = dem_cv), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de CV de DEM - escalado log", fill = "CV") +
theme_minimal()
p_mapa_log_slope_cv <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_cv), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de log(CV de SLOPE)", fill = "CV") +
theme_minimal()
p_mapa_log_dem_cv_dens <- ggplot(modelo_df) +
geom_sf(aes(fill = dem_cv_dens), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de log(densidad de CV de DEM)", fill = "Densidad CV") +
theme_minimal()
p_mapa_log_slope_cv_dens <- ggplot(modelo_df) +
geom_sf(aes(fill = slope_cv_dens), color = NA) +
scale_fill_gradientn(
colours = pal,
na.value = "white",
trans = "log10",
breaks = scales::trans_breaks("log10", function(x) 10^x)
) +
labs(title = "Mapa de log(densidad de CV de SLOPE)", fill = "Densidad CV") +
theme_minimal()
p_mapas_covs <- p_mapa_dem_mean + p_mapa_slope_mean + p_mapa_log_dem_cv + p_mapa_log_slope_cv + p_mapa_log_dem_cv_dens + p_mapa_log_slope_cv_dens+ plot_layout(ncol = 2, widths = c(1, 1))
#guarda el último gráfico generado
ggsave(here("Figures", "mosaico_mapa_covariables_DEM.png"),
plot = p_mapas_covs,
width = 8,
height = 10,
dpi = 350)
ggplot(modelo_df_completo, aes(x = dem_mean, y = resid_hot95)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "loess", se = FALSE, color = "darkred") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs dem_mean", y = "Residuos", x = "Altitud media") +
theme_minimal()
ggplot(modelo_df_completo, aes(x = log_slope_cv_dens, y = resid_hot95)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "loess", se = FALSE, color = "darkblue") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs log(slope CV densificado)", y = "Residuos", x = "log(slope CV densificado)") +
theme_minimal()
residuals(glm_hot)
?predict()
ggplot(modelo_df_completo, aes(x = dem_mean, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_smooth(method = "loess", se = FALSE, color = "#FFD700") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs dem_mean", y = "Residuos", x = "Altitud media") +
theme_minimal()
ggplot(modelo_df_completo, aes(x = log_slope_cv_dens, y = resid_hot95)) +
geom_point(alpha = 0.3, color = "#56B4E9") +
geom_smooth(method = "loess", se = FALSE, color = "#FFD700") +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuales vs log(slope CV densificado)", y = "Residuos", x = "log(slope CV densificado)") +
theme_minimal()
p1 <- ggplot(modelo_df_completo) +
geom_sf(aes(fill = prob_hot95), color = NA) +
scale_fill_viridis_c(option = "viridis", na.value = "white") +
labs(title = "Probabilidad predicha de hotspot", fill = "Prob") +
theme_minimal()
p2 <- ggplot(modelo_df_completo) +
geom_sf(aes(fill = resid_hot95), color = NA) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", na.value = "white") +
labs(title = "Residuo del modelo binomial", fill = "Residuo") +
theme_minimal()
p1 + p2  # con patchwork
ggplot(modelo_df_completo) +
geom_sf(aes(fill = prob_hot95), color = NA) +
scale_fill_viridis_c(option = "viridis", na.value = "white") +
labs(title = "Probabilidad predicha de hotspot", fill = "Prob") +
theme_minimal()
ggplot(modelo_df_completo) +
geom_sf(aes(fill = resid_hot95), color = NA) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", na.value = "white") +
labs(title = "Residuo del modelo binomial", fill = "Residuo") +
theme_minimal()
